<Project>

  <!-- Get the analyzer from the PrivateLike NuGet package -->
  <Target Name="_PrivateLikeGatherAnalyzers">
    <ItemGroup>
      <_PrivateLikeAnalyzer Include="@(Analyzer)" Condition="'%(Analyzer.NuGetPackageId)' == 'PrivateLike'" />
    </ItemGroup>
  </Target>

  <!-- Remove the analyzer if using Roslyn < 4.3 (PrivateLike's generators require Roslyn 4.3) -->
  <Target Name="_PrivateLikeRemoveAnalyzersForRoslyn3"
          Condition="'$(CSharpCoreTargetsPath)' != ''"
          AfterTargets="ResolvePackageDependenciesForBuild;ResolveNuGetPackageAssets"
          DependsOnTargets="_PrivateLikeGatherAnalyzers">

    <!--
      Use the CSharpCoreTargetsPath property to find the version of the compiler we are using. This is the same mechanism
      MSBuild uses to find the compiler. We could check the assembly version for any compiler assembly (since they all have
      the same version) but Microsoft.Build.Tasks.CodeAnalysis.dll is where MSBuild loads the compiler tasks from so if
      someone is getting creative with msbuild tasks/targets this is the "most correct" assembly to check.
    -->
    <GetAssemblyIdentity AssemblyFiles="$([System.IO.Path]::Combine(`$([System.IO.Path]::GetDirectoryName($(CSharpCoreTargetsPath)))`,`Microsoft.Build.Tasks.CodeAnalysis.dll`))">
      <Output TaskParameter="Assemblies" ItemName="PrivateLikeCurrentCompilerAssemblyIdentity"/>
    </GetAssemblyIdentity>

    <PropertyGroup>

      <!-- Transform the resulting item from GetAssemblyIdentity into a property representing its assembly version -->
      <PrivateLikeCurrentCompilerVersion>@(PrivateLikeCurrentCompilerAssemblyIdentity->'%(Version)')</PrivateLikeCurrentCompilerVersion>

      <!-- The CurrentCompilerVersionIsNotNewEnough property can now be defined based on the Roslyn assembly version -->
      <PrivateLikeCurrentCompilerVersionIsNotNewEnough Condition="$([MSBuild]::VersionLessThan($(PrivateLikeCurrentCompilerVersion), 4.3))">true</PrivateLikeCurrentCompilerVersionIsNotNewEnough>
    </PropertyGroup>

    <!-- If the Roslyn version is < 4.3, disable the source generators -->
    <ItemGroup Condition ="'$(PrivateLikeCurrentCompilerVersionIsNotNewEnough)' == 'true'">
      <Analyzer Remove="@(_PrivateLikeAnalyzer)"/>
    </ItemGroup>

    <!--
      If the source generators are disabled, also emit an error. This would've been produced by MSBuild itself as well, but
      emitting this manually lets us customize the message to inform developers as to why exactly the generators have been
      disabled, and that PrivateLike will not work at all unless a more up to date IDE or compiler version are used.
    -->
    <Error Condition ="'$(PrivateLikeCurrentCompilerVersionIsNotNewEnough)' == 'true'"
           Code="PRIVCFG0001"
           Text="The PrivateLike source generators have been disabled on the current configuration, as they need Roslyn 4.3 in order to work. PrivateLike requires the source generators to run in order to generate polyfills, so the library cannot be used without a more up to date IDE (eg. VS 2022 17.3 or greater) or .NET SDK version (.NET 6.0.400 SDK or greater)."/>  
  </Target>
  
  <!-- Remove the analyzer if Roslyn is missing -->
  <Target Name="_PrivateLikeRemoveAnalyzersForRosynNotFound"
          Condition="'$(CSharpCoreTargetsPath)' == ''"
          AfterTargets="ResolvePackageDependenciesForBuild;ResolveNuGetPackageAssets"
          DependsOnTargets="_PrivateLikeGatherAnalyzers">

    <!-- If no Roslyn assembly could be found, just remove the analyzer without emitting a warning -->
    <ItemGroup>
      <Analyzer Remove="@(_PrivateLikeAnalyzer)"/>
    </ItemGroup>
  </Target>

  <!--
    Inform the user if packages.config is used (as the analyzers and the source generators
    won't work at all). Since packages.config can only be used with legacy-style projects,
    the entire package can be skipped if an SDK-style project is used.
  -->
  <Target Name="_PrivateLikeWarnForPackagesConfigUse"
          AfterTargets="ResolvePackageDependenciesForBuild;ResolveNuGetPackageAssets"
          Condition="'$(UsingMicrosoftNetSDK)' != 'true'">

    <!--
      Check whether packages are being restored via packages.config, by reading the associated MSBuild property.
      This happens when either the project style is using packages.config, or when explicitly requested.
      See https://learn.microsoft.com/nuget/reference/msbuild-targets#restoring-packagereference-and-packagesconfig-projects-with-msbuild.
    -->
    <PropertyGroup>
      <PrivateLikeIsTargetProjectUsingPackagesConfig Condition ="'$(RestorePackagesConfig)' == 'true' OR '$(RestoreProjectStyle)' == 'PackagesConfig'">true</PrivateLikeIsTargetProjectUsingPackagesConfig>
    </PropertyGroup>

    <!--
      If no packages.config properties are set, also try to manually find the packages.config file.
      This will be in the @(None) elements, if present. Doing so makes sure this works in builds as
      well, since the implicit targets populating the properties above only run when restoring.
      Since the packages.config file will always be in the root of the project, if present, we will
      match with the full item spec (see https://learn.microsoft.com/nuget/reference/packages-config).
    -->
    <FindInList ItemSpecToFind="packages.config"
                List="@(None)"
                MatchFileNameOnly="false"
                Condition="'$(PrivateLikeIsTargetProjectUsingPackagesConfig)' != 'true'">
      <Output TaskParameter="ItemFound" PropertyName="PrivateLikePackagesConfigFile"/>
    </FindInList>

    <!-- Make sure to update the MSBuild property if the above task did find something -->
    <PropertyGroup>
      <PrivateLikeIsTargetProjectUsingPackagesConfig Condition ="'$(PrivateLikePackagesConfigFile)' == 'packages.config'">true</PrivateLikeIsTargetProjectUsingPackagesConfig>
    </PropertyGroup>

    <!-- Emit a warning in case packages.config is used -->
    <Warning Condition ="'$(PrivateLikeIsTargetProjectUsingPackagesConfig)' == 'true'"
             Code="PRIVCFG0002"
             Text="The PrivateLike source generators might not be loaded correctly, as the current project is using the packages.config setup to restore NuGet packages. Source generators require PackageReference to be used (either in a legacy-style or SDK-style .csproj project, both are supported as long as PackageReference is used)."/>
  </Target>
</Project>
